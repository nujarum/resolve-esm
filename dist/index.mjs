import{once as t}from"events";import{Worker as e}from"worker_threads";import{URL as r,pathToFileURL as n}from"url";import o from"callsites";const s=/^\w+:\/\//;const a=m(f);async function i(t,e){e??(e=p());const[r]=await c([t],e);return r}async function c(r,n){n??(n=p());const o={parent:n,specifiers:r};const s={execArgv:["--experimental-import-meta-resolve"],workerData:o};const i=new e(a,s);try{const[e]=await t(i,"message");return e}finally{void i.terminate()}}function m(t){const e=t.toString();const n=e.slice(e.indexOf("{")+1,e.lastIndexOf("}")).trim();return new r(`data:text/javascript,${n}`)}function p(){const t=o();for(let e=t.length,r;r=t[--e];){const t=r.getFileName();if(t&&!t.startsWith("internal/")){return s.test(t)?t:n(t).href}}return import.meta.url}async function f(){const{parentPort:t,workerData:e}=await import("worker_threads");const{parent:r,specifiers:n}=e;const o=await Promise.all(n.map((t=>import.meta.resolve(t,r))));t.postMessage(o)}export{i as importMetaResolve,c as importMetaResolveAll};
//# sourceMappingURL=index.mjs.map
