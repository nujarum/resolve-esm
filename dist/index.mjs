import{once as t}from"events";import{URL as e,pathToFileURL as r}from"url";import{Worker as n}from"worker_threads";import o from"callsites";const s=Object.freeze(["--experimental-import-meta-resolve"]);const a=/^\w+:\/\/.+/;const c=import.meta.url;const i=p(u);async function m(t,e){e??=l();const[r]=await f([t],e);return r}async function f(e,r){r??=l();const o={parent:r,specifiers:e};const a={execArgv:s,workerData:o};const c=new n(i,a);try{const[e]=await t(c,"message");return e}catch(t){const{message:e,name:r}=Object(t);throw Object.assign(new Error(e),{name:r})}finally{void c.terminate()}}function p(t){const r=t.toString();const n=r.slice(r.indexOf("{")+1,r.lastIndexOf("}")).trim();return new e(`data:text/javascript,${encodeURIComponent(n)}`)}function l(){for(const t of o()){const e=t.getFileName();if(e){const t=a.test(e)?e:r(e).href;if(t!==c){return t}}}return undefined}async function u(){const{parentPort:t,workerData:e}=await import("worker_threads");const{parent:r,specifiers:n}=e;const o=await Promise.all(n.map((t=>import.meta.resolve(t,r))));t.postMessage(o)}export{m as importMetaResolve,f as importMetaResolveAll};
//# sourceMappingURL=index.mjs.map
