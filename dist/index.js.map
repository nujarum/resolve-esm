{"version":3,"file":"index.js","sources":["../src/index.ts"],"sourcesContent":["/* eslint-disable\n    @typescript-eslint/no-non-null-assertion,\n*/\nimport type { WorkerOptions } from 'node:worker_threads';\n\nimport { once } from 'node:events';\nimport { URL, pathToFileURL } from 'node:url';\nimport { Worker } from 'node:worker_threads';\nimport callsites from 'callsites';\n\ninterface WorkerData {\n    readonly parent?: string | URL | undefined;\n    readonly specifiers: readonly string[];\n}\n\nconst execArgv = Object.freeze([\n    ...new Set(process.execArgv)\n        .add('--experimental-import-meta-resolve')\n        .add('--no-warnings')\n]);\nconst isUrl = /^\\w+:\\/\\/.+/;\nconst thisUrl = import.meta.url;\nconst workerURL = createWorkerURL(workerContext);\n\n/**\n * Resolve a (single) module specifier.\n * @see [`import.meta.resolve`](https://nodejs.org/docs/latest-v18.x/api/esm.html#importmetaresolvespecifier-parent)\n * @param specifier The module specifier to resolve relative to `parent`.\n * @param parent    The absolute parent module URL to resolve from. (@defaultValue [`import.meta.url`](https://nodejs.org/docs/latest-v18.x/api/esm.html#importmetaurl))\n * @returns         A `Promise` that resolves to a module URL string.\n*/\nexport async function importMetaResolve(specifier: string, parent?: string | URL) {\n    const [result] = await importMetaResolveAll([specifier], parent);\n    return result!;\n}\n\n/**\n * Resolve multiple module specifiers with same `parent`.\n * @param iterable  An iterable (such as an array) of module specifiers to resolve relative to `parent`.\n * @param parent    The absolute parent module URL to resolve from. (@defaultValue [`import.meta.url`](https://nodejs.org/docs/latest-v18.x/api/esm.html#importmetaurl))\n * @returns         A `Promise` that resolves to an array of module URL strings.\n */\nexport async function importMetaResolveAll(iterable: Readonly<Iterable<string>>, parent?: string | URL) {\n    const specifiers = Array.isArray(iterable) ? iterable : [...iterable];\n    if (specifiers.length < 1) {\n        return [];\n    }\n    parent ??= getCallerUrl() as string | undefined;\n    const workerData: WorkerData = { parent, specifiers };\n    const workerOptions = { execArgv, workerData } as WorkerOptions;\n    const worker = new Worker(workerURL, workerOptions);\n    try {\n        const [results] = await once(worker, 'message') as [string[]];\n        return results;\n    } catch (e) {\n        const { message, name } = Object(e) as Error;\n        throw Object.assign(new Error(message), { name });\n    } finally {\n        void worker.terminate();\n    }\n}\n\nfunction createWorkerURL(workerContextFunction: () => void | Promise<void>) {\n    const fText = workerContextFunction.toString();\n    const fBody = fText.slice(fText.indexOf('{') + 1, fText.lastIndexOf('}')).trim();\n    return new URL(`data:text/javascript,${encodeURIComponent(fBody)}`);\n}\n\nfunction getCallerUrl(): string | void {\n    for (const callSite of callsites()) {\n        const uri = callSite.getFileName();\n        if (uri) {\n            const url = isUrl.test(uri) ? uri : pathToFileURL(uri).href;\n            if (url !== thisUrl) {\n                return url;\n            }\n        }\n    }\n}\n\nasync function workerContext() {\n    const { parentPort, workerData } = await import('node:worker_threads'); // eslint-disable-line @typescript-eslint/no-unsafe-assignment\n    const { parent, specifiers } = workerData as WorkerData;\n    const results = await Promise.all(specifiers.map(specifier => import.meta.resolve!(specifier, parent)));\n    parentPort!.postMessage(results);\n}\n"],"names":["execArgv","isUrl","thisUrl","workerURL","createWorkerURL","workerContext","importMetaResolve","specifier","parent","result","importMetaResolveAll","iterable","specifiers","getCallerUrl","workerOptions","worker","Worker","results","once","e","message","name","workerContextFunction","fText","fBody","URL","callSite","callsites","uri","url","pathToFileURL","parentPort","workerData"],"mappings":"2JAeA,MAAMA,EAAW,OAAO,OAAO,CAC3B,GAAG,IAAI,IAAI,QAAQ,QAAQ,EACtB,IAAI,oCAAoC,EACxC,IAAI,eAAe,CAC5B,CAAC,EACKC,EAAQ,cACRC,EAAU,YAAY,IACtBC,EAAYC,EAAgBC,CAAa,EAS/C,eAAsBC,EAAkBC,EAAmBC,EAAuB,CAC9E,KAAM,CAACC,CAAM,EAAI,MAAMC,EAAqB,CAACH,CAAS,EAAGC,CAAM,EAC/D,OAAOC,CACX,CAQA,eAAsBC,EAAqBC,EAAsCH,EAAuB,CACpG,MAAMI,EAAa,MAAM,QAAQD,CAAQ,EAAIA,EAAW,CAAC,GAAGA,CAAQ,EACpE,GAAIC,EAAW,OAAS,EACpB,MAAO,GAEXJ,IAAAA,EAAWK,EAAa,GAExB,MAAMC,EAAgB,CAAE,SAAAd,EAAU,WADH,CAAE,OAAAQ,EAAQ,WAAAI,CAAW,CACP,EACvCG,EAAS,IAAIC,EAAOb,EAAWW,CAAa,EAClD,GAAI,CACA,KAAM,CAACG,CAAO,EAAI,MAAMC,EAAKH,EAAQ,SAAS,EAC9C,OAAOE,CACX,OAASE,EAAAA,CACL,KAAM,CAAE,QAAAC,EAAS,KAAAC,CAAK,EAAI,OAAOF,CAAC,EAClC,MAAM,OAAO,OAAO,IAAI,MAAMC,CAAO,EAAG,CAAE,KAAAC,CAAK,CAAC,CACpD,QAAE,CACON,EAAO,UAAA,CAChB,CACJ,CAEA,SAASX,EAAgBkB,EAAmD,CACxE,MAAMC,EAAQD,EAAsB,SAAS,EACvCE,EAAQD,EAAM,MAAMA,EAAM,QAAQ,GAAG,EAAI,EAAGA,EAAM,YAAY,GAAG,CAAC,EAAE,KAC1E,EAAA,OAAO,IAAIE,EAAI,wBAAwB,mBAAmBD,CAAK,GAAG,CACtE,CAEA,SAASX,GAA8B,CACnC,UAAWa,KAAYC,IAAa,CAChC,MAAMC,EAAMF,EAAS,cACrB,GAAIE,EAAK,CACL,MAAMC,EAAM5B,EAAM,KAAK2B,CAAG,EAAIA,EAAME,EAAcF,CAAG,EAAE,KACvD,GAAIC,IAAQ3B,EACR,OAAO2B,GAIvB,CAEA,eAAexB,GAAgB,CAC3B,KAAM,CAAE,WAAA0B,EAAY,WAAAC,CAAW,EAAI,KAAa,QAAA,qBAAqB,EAC/D,CAAE,OAAAxB,EAAQ,WAAAI,CAAW,EAAIoB,EACzBf,EAAU,MAAM,QAAQ,IAAIL,EAAW,IAAIL,GAAa,YAAY,QAASA,EAAWC,CAAM,CAAC,CAAC,EACtGuB,EAAY,YAAYd,CAAO,CACnC"}