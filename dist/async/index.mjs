import{once as m}from"node:events";import{createRequire as l}from"node:module";import{Worker as p}from"node:worker_threads";import{getCallerUrl as f,execArgv as g}from"#_internal";const s=import.meta.url,u=l(s),w=u.resolve("#worker/async");async function x(e,r){const[t]=await y([e],r);return t}async function y(e,r){const t=Array.isArray(e)?e:[...e];if(t.length<1)return[];r??=f(s);const o=new p(w,{execArgv:g,workerData:{parent:r,specifiers:t}});try{const[a]=await m(o,"message");return a}catch(a){const{message:n,name:c,stack:i}=Object(a);throw Object.assign(new Error,{message:n,name:c,stack:i})}finally{o.terminate()}}export{x as importMetaResolve,y as importMetaResolveAll};
//# sourceMappingURL=index.mjs.map
