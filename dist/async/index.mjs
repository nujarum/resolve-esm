import{once as u}from"node:events";import{createRequire as p}from"node:module";import{Worker as f}from"node:worker_threads";import{getCallerUrl as g,execArgv as w}from"#_internal";const l=import.meta.url,y=p(l),k=y.resolve("#worker/async");async function j(r,a){const[t]=await v([r],a);return t}async function v(r,a){const t=Array.isArray(r)?r:[...r];if(t.length<1)return[];const m=[...new Set(t)];a??=g(l);const i=new f(k,{execArgv:w,workerData:{names:m,parent:a}});try{const[n]=await u(i,"message"),s=m.reduce((e,o,c)=>(e[o]=n[c],e),Object.create(null));return t.map(e=>s[e])}catch(n){const{cause:s,message:e,name:o,stack:c}=Object(n);throw Object.assign(new Error,{cause:s,message:e,name:o,stack:c})}finally{i.terminate()}}export{j as importMetaResolve,v as importMetaResolveAll};
//# sourceMappingURL=index.mjs.map
