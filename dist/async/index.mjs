import{once as p}from"node:events";import{createRequire as f}from"node:module";import{Worker as u}from"node:worker_threads";import{getCallerUrl as g,execArgv as w}from"#_internal";const i=import.meta.url,y=f(i),k=y.resolve("#worker/async");async function j(r,a){const[t]=await v([r],a);return t}async function v(r,a){const t=Array.isArray(r)?r:[...r];if(t.length<1)return[];const c=[...new Set(t)];a??=g(i);const m=new u(k,{execArgv:w,workerData:{names:c,parent:a}});try{const[n]=await p(m,"message"),o=c.reduce((e,s,l)=>(e[s]=n[l],e),Object.create(null));return t.map(e=>o[e])}catch(n){const{message:o,name:e,stack:s}=Object(n);throw Object.assign(new Error,{message:o,name:e,stack:s})}finally{m.terminate()}}export{j as importMetaResolve,v as importMetaResolveAll};
//# sourceMappingURL=index.mjs.map
