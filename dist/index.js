import{once as e}from"node:events";import{URL as t,pathToFileURL as n}from"node:url";import{Worker as r}from"node:worker_threads";import o from"callsites";const s=/^\w+:\/\/.+/;const a=import.meta.url;const c=f(d);async function i(e,t){t??(t=p());const[n]=await m([e],t);return n}async function m(t,n){n??(n=p());const o=Object.freeze([...new Set(process.execArgv).add("--experimental-import-meta-resolve").add("--no-warnings")]);const s={parent:n,specifiers:t};const a={execArgv:o,workerData:s};const i=new r(c,a);try{const[t]=await e(i,"message");return t}catch(e){const{message:t,name:n}=Object(e);throw Object.assign(new Error(t),{name:n})}finally{void i.terminate()}}function f(e){const n=e.toString();const r=n.slice(n.indexOf("{")+1,n.lastIndexOf("}")).trim();return new t(`data:text/javascript,${encodeURIComponent(r)}`)}function p(){for(const e of o()){const t=e.getFileName();if(t){const e=s.test(t)?t:n(t).href;if(e!==a){return e}}}return undefined}async function d(){const{parentPort:e,workerData:t}=await import("node:worker_threads");const{parent:n,specifiers:r}=t;const o=await Promise.all(r.map((e=>import.meta.resolve(e,n))));e.postMessage(o)}export{i as importMetaResolve,m as importMetaResolveAll};
//# sourceMappingURL=index.js.map
