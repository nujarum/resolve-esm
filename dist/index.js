import{once as c}from"node:events";import{URL as m,pathToFileURL as p}from"node:url";import{Worker as f}from"node:worker_threads";import l from"callsites";const w=Object.freeze([...new Set(process.execArgv).add("--experimental-import-meta-resolve").add("--no-warnings")]),u=/^\w+:\/\/.+/,g=import.meta.url,d=y(R);async function k(e,t){const[r]=await v([e],t);return r}async function v(e,t){const r=Array.isArray(e)?e:[...e];if(r.length<1)return[];t??(t=x());const a={execArgv:w,workerData:{parent:t,specifiers:r}},o=new f(d,a);try{const[n]=await c(o,"message");return n}catch(n){const{message:s,name:i}=Object(n);throw Object.assign(new Error(s),{name:i})}finally{o.terminate()}}function y(e){const t=e.toString(),r=t.slice(t.indexOf("{")+1,t.lastIndexOf("}")).trim();return new m(`data:text/javascript,${encodeURIComponent(r)}`)}function x(){for(const e of l()){const t=e.getFileName();if(t){const r=u.test(t)?t:p(t).href;if(r!==g)return r}}}async function R(){const{parentPort:e,workerData:t}=await import("node:worker_threads"),{parent:r,specifiers:a}=t,o=await Promise.all(a.map(n=>import.meta.resolve(n,r)));e.postMessage(o)}export{k as importMetaResolve,v as importMetaResolveAll};
//# sourceMappingURL=index.js.map
