import{once as e}from"node:events";import{URL as t,pathToFileURL as n}from"node:url";import{Worker as r}from"node:worker_threads";import o from"callsites";const s=Object.freeze([...new Set(process.execArgv).add("--experimental-import-meta-resolve").add("--no-warnings")]);const a=/^\w+:\/\/.+/;const c=import.meta.url;const i=p(w);async function m(e,t){t??(t=d());const[n]=await f([e],t);return n}async function f(t,n){n??(n=d());const o={parent:n,specifiers:t};const a={execArgv:s,workerData:o};const c=new r(i,a);try{const[t]=await e(c,"message");return t}catch(e){const{message:t,name:n}=Object(e);throw Object.assign(new Error(t),{name:n})}finally{void c.terminate()}}function p(e){const n=e.toString();const r=n.slice(n.indexOf("{")+1,n.lastIndexOf("}")).trim();return new t(`data:text/javascript,${encodeURIComponent(r)}`)}function d(){for(const e of o()){const t=e.getFileName();if(t){const e=a.test(t)?t:n(t).href;if(e!==c){return e}}}return undefined}async function w(){const{parentPort:e,workerData:t}=await import("node:worker_threads");const{parent:n,specifiers:r}=t;const o=await Promise.all(r.map((e=>import.meta.resolve(e,n))));e.postMessage(o)}export{m as importMetaResolve,f as importMetaResolveAll};
//# sourceMappingURL=index.js.map
