import{Worker as g}from"node:worker_threads";import{createRequire as h}from"node:module";import{getCallerUrl as v,execArgv as b}from"#_internal";const u=import.meta.url,k=h(u),x=new TextDecoder,S=k.resolve("#worker/sync");function j(r,o){const[t]=M([r],o);return t}function M(r,o){const t=Array.isArray(r)?r:[...r],l=t.length;if(l<1)return[];const s=[...new Set(t)];o??=v(u);let n;try{const a=new SharedArrayBuffer(l+1<<10),i=new Int32Array(a);let c;if(n=new g(S,{execArgv:b,workerData:{buffer:a,names:s,parent:o}}).once("error",e=>c=e),Atomics.wait(i,0,0,1e3),c)throw c;const m=i[0],w=new Uint8Array(a,4,Math.abs(m)),f=x.decode(w);if(!(0<m))throw Object.assign(new Error,JSON.parse(f||"null"));const p=f.split("\0"),A=s.reduce((e,y,d)=>(e[y]=p[d],e),Object.create(null));return t.map(e=>A[e])}finally{n==null||n.terminate()}}export{j as importMetaResolve,M as importMetaResolveAll};
//# sourceMappingURL=index.mjs.map
