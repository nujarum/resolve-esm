import{Worker as p}from"node:worker_threads";import{createRequire as u}from"node:module";import{getCallerUrl as A,execArgv as y}from"#_internal";const f=import.meta.url,g=new TextDecoder,h=u(f),v=h.resolve("#worker/sync");function M(r,e){const[t]=d([r],e);return t}function d(r,e){const t=Array.isArray(r)?r:[...r],i=t.length;if(i<1)return[];e??=A(f);let o;try{const n=new SharedArrayBuffer(i+1<<10),s=new Int32Array(n);let a;if(o=new p(v,{execArgv:y,workerData:{buffer:n,parent:e,specifiers:t}}).once("error",w=>a=w),Atomics.wait(s,0,0,1e3),a)throw a;const l=s[0],m=new Uint8Array(n,4,Math.abs(l)),c=g.decode(m);if(0<l)return c.split(",");throw Object.assign(new Error,JSON.parse(c||"null"))}finally{o==null||o.terminate()}}export{M as importMetaResolve,d as importMetaResolveAll};
//# sourceMappingURL=index.mjs.map
