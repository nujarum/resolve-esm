import{Worker as h}from"node:worker_threads";import{createRequire as d}from"node:module";import{getCallerUrl as g,execArgv as v}from"#_internal";const f=import.meta.url,b=d(f),k=new TextDecoder,x=b.resolve("#worker/sync");function j(r,n){const[t]=S([r],n);return t}function S(r,n){const t=Array.isArray(r)?r:[...r];if(t.length<1)return[];const o=[...new Set(t)];n??=g(f);let a;try{const l=new SharedArrayBuffer(o.length+1<<10),s=new Int32Array(l);let c;if(a=new h(x,{execArgv:v,workerData:{buffer:l,names:o,parent:n}}).once("error",e=>c=e),Atomics.wait(s,0,0,1e3),c)throw c;const i=s[0],u=new Uint8Array(l,4,Math.abs(i)),m=k.decode(u);if(!(0<i))throw Object.assign(new Error,JSON.parse(m||"null"));const p=m.split("\0"),w=o.reduce((e,A,y)=>(e[A]=p[y],e),Object.create(null));return t.map(e=>w[e])}finally{a==null||a.terminate()}}export{j as importMetaResolve,S as importMetaResolveAll};
//# sourceMappingURL=index.mjs.map
