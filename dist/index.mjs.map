{"version":3,"file":"index.mjs","sources":["../src/index.ts"],"sourcesContent":["import type { WorkerOptions } from 'worker_threads';\n\nimport { once } from 'events';\nimport { Worker } from 'worker_threads';\nimport { URL, pathToFileURL } from 'url';\nimport callsites from 'callsites';\n\ninterface WorkerData {\n    readonly parent?: string | URL | undefined;\n    readonly specifiers: readonly string[];\n}\n\nconst execArgv = Object.freeze([\n    '--experimental-import-meta-resolve',\n]) as string[];\nconst isUrl = /^\\w+:\\/\\/.+/;\nconst thisUrl = import.meta.url;\nconst workerUrl = createWorkerURL(workerContext);\n\n/**\n * Resolve a (single) module specifier.\n * @see [`import.meta.resolve`](https://nodejs.org/dist/latest-v16.x/docs/api/esm.html#esm_import_meta_resolve_specifier_parent)\n * @param specifier The module specifier to resolve relative to `parent`.\n * @param parent    The absolute parent module URL to resolve from. (@default [`import.meta.url`](https://nodejs.org/dist/latest-v16.x/docs/api/esm.html#esm_import_meta_url))\n * @returns         A `Promise` that resolves to a module URL string.\n*/\nexport async function importMetaResolve(specifier: string, parent?: string | URL) {\n    parent ??= getCallerUrl();\n    const [result] = await importMetaResolveAll([specifier], parent);\n    return result!;\n}\n\n/**\n * Resolve multiple module specifiers with same `parent`.\n * @param specifiers    The array of module specifiers to resolve relative to `parent`.\n * @param parent        The absolute parent module URL to resolve from. (@default [`import.meta.url`](https://nodejs.org/dist/latest-v16.x/docs/api/esm.html#esm_import_meta_url))\n * @returns             A `Promise` that resolves to an array of module URL strings.\n */\nexport async function importMetaResolveAll(specifiers: readonly string[], parent?: string | URL) {\n    parent ??= getCallerUrl();\n    const workerData: WorkerData = { parent, specifiers };\n    const workerOptions: WorkerOptions = { execArgv, workerData };\n    const worker = new Worker(workerUrl, workerOptions);\n    try {\n        const [results] = await once(worker, 'message') as [string[]];\n        return results;\n    } catch (e) {\n        const { message, name } = Object(e) as Error;\n        throw Object.assign(new Error(message), { name });\n    } finally {\n        void worker.terminate();\n    }\n}\n\nfunction createWorkerURL(workerContextFunction: () => void | Promise<void>) {\n    const fText = workerContextFunction.toString();\n    const fBody = fText.slice(fText.indexOf('{') + 1, fText.lastIndexOf('}')).trim();\n    return new URL(`data:text/javascript,${fBody}`);\n}\n\nfunction getCallerUrl() {\n    for (const callSite of callsites()) {\n        const uri = callSite.getFileName();\n        if (uri) {\n            const url = isUrl.test(uri) ? uri : pathToFileURL(uri).href;\n            if (url !== thisUrl) {\n                return url;\n            }\n        }\n    }\n    return undefined;\n}\n\nasync function workerContext() {\n    const { parentPort, workerData } = await import('worker_threads'); // eslint-disable-line @typescript-eslint/no-unsafe-assignment\n    const { parent, specifiers } = workerData as WorkerData;\n    const results = await Promise.all(specifiers.map(specifier => import.meta.resolve!(specifier, parent)));\n    parentPort!.postMessage(results);\n}\n"],"names":["execArgv","Object","freeze","isUrl","thisUrl","import","meta","url","workerUrl","createWorkerURL","workerContext","async","importMetaResolve","specifier","parent","getCallerUrl","result","importMetaResolveAll","specifiers","workerData","workerOptions","worker","Worker","results","once","e","message","name","assign","Error","terminate","workerContextFunction","fText","toString","fBody","slice","indexOf","lastIndexOf","trim","URL","callSite","callsites","uri","getFileName","test","pathToFileURL","href","undefined","parentPort","Promise","all","map","resolve","postMessage"],"mappings":"4IAYA,MAAMA,EAAWC,OAAOC,OAAO,CAC3B,uCAEJ,MAAMC,EAAQ,cACd,MAAMC,EAAUC,OAAOC,KAAKC,IAC5B,MAAMC,EAAYC,EAAgBC,GAS3BC,eAAeC,EAAkBC,EAAmBC,GACvDA,IAAAA,EAAWC,KACX,MAAOC,SAAgBC,EAAqB,CAACJ,GAAYC,GACzD,OAAOE,EASJL,eAAeM,EAAqBC,EAA+BJ,GACtEA,IAAAA,EAAWC,KACX,MAAMI,EAAyB,CAAEL,OAAAA,EAAQI,WAAAA,GACzC,MAAME,EAA+B,CAAEpB,SAAAA,EAAUmB,WAAAA,GACjD,MAAME,EAAS,IAAIC,EAAOd,EAAWY,GACrC,IACI,MAAOG,SAAiBC,EAAKH,EAAQ,WACrC,OAAOE,EACT,MAAOE,GACL,MAAMC,QAAEA,EAAOC,KAAEA,GAAS1B,OAAOwB,GACjC,MAAMxB,OAAO2B,OAAO,IAAIC,MAAMH,GAAU,CAAEC,KAAAA,iBAErCN,EAAOS,aAIpB,SAASrB,EAAgBsB,GACrB,MAAMC,EAAQD,EAAsBE,WACpC,MAAMC,EAAQF,EAAMG,MAAMH,EAAMI,QAAQ,KAAO,EAAGJ,EAAMK,YAAY,MAAMC,OAC1E,OAAO,IAAIC,EAAI,wBAAwBL,KAG3C,SAASnB,IACL,IAAK,MAAMyB,KAAYC,IAAa,CAChC,MAAMC,EAAMF,EAASG,cACrB,GAAID,EAAK,CACL,MAAMnC,EAAMJ,EAAMyC,KAAKF,GAAOA,EAAMG,EAAcH,GAAKI,KACvD,GAAIvC,IAAQH,EAAS,CACjB,OAAOG,IAInB,OAAOwC,UAGXpC,eAAeD,IACX,MAAMsC,WAAEA,EAAU7B,WAAEA,SAAqBd,OAAO,kBAChD,MAAMS,OAAEA,EAAMI,WAAEA,GAAeC,EAC/B,MAAMI,QAAgB0B,QAAQC,IAAIhC,EAAWiC,KAAItC,GAAaR,OAAOC,KAAK8C,QAASvC,EAAWC,MAC9FkC,EAAYK,YAAY9B"}